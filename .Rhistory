knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(broom)
library(scales)
library(tmvtnorm)
library(modelsummary)
# Create confounder variables that are related to each other
mu <- c(income = 900, temperature = 75, health = 50)
stddev <- c(income = 200, temperature = 10, health = 20)
lower <- c(income = 100, temperature = 60, health = 5)
upper <- c(income = 2000, temperature = 90, health = 100)
# https://stackoverflow.com/a/46563034/120898
correlations_confounders <- tribble(
~var1, ~var2, ~correlation,
"income", "temperature", 0.2,
"income", "health", 0.8,
# "temperature", "health", 0.6,
"temperature", "health", 0.2,
) %>%
mutate_at(vars(starts_with("var")),
~factor(., levels = c("income", "temperature", "health"))) %>%
xtabs(correlation ~ var1 + var2, ., drop.unused.levels = FALSE) %>%
'+'(., t(.)) %>%
`diag<-`(1) %>%
as.data.frame.matrix() %>% as.matrix()
# Convert correlation matrix to covariance matrix using fancy math
cov_matrix_confounders <- stddev %*% t(stddev) * correlations_confounders
# Force the covariance matrix to be positive definite and symmetric
# https://stats.stackexchange.com/q/153166/3025
sigma <- as.matrix(Matrix::nearPD(cov_matrix_confounders)$mat)
num <- 1752
set.seed(123)
confounders <- tmvtnorm::rtmvnorm(num, mean = mu, sigma = sigma,
lower = lower, upper = upper) %>%
magrittr::set_colnames(names(mu)) %>% as_tibble() %>%
mutate(health = round(health, 0),
temperature = round(temperature, 1))
set.seed(123)
mosquito_nets <- tibble(id = 1:num) %>%
bind_cols(confounders) %>%
mutate(household = rpois(n(), 2) + 1) %>%
mutate(enrolled = household > 4 & income < 700) %>%
mutate(resistance = rescale(rnorm(n(), 0, 1), to = c(5, 95))) %>%
# Simulate data from a logit model: https://stats.stackexchange.com/a/46525/3025
# But then do all sorts of weird distortion to change the likelihood of using a net
mutate(net_effect = (1.85 * income / 10) + (-1.7 * temperature) + (1.8 * health / 10) +
(150 * enrolled) + (2.9 * household),
net_diff = net_effect - mean(net_effect),
net_effect = ifelse(net_diff < 0, net_effect - (net_diff / 2), net_effect),
net_effect_rescaled = rescale(net_effect, to = c(-2.2, 2.2)),
inv_logit = 1 / (1 + exp(-net_effect_rescaled)),
net_num = rbinom(n(), 1, inv_logit),
net = net_num == 1) %>%
mutate(malaria_risk_effect = (-5 * income / 10) + (3.9 * temperature) +
(1.4 * resistance) + (9 * health / 10) + (-80 * net_num),
malaria_risk_diff = malaria_risk_effect - mean(malaria_risk_effect),
malaria_risk_effect = ifelse(malaria_risk_diff < 0,
malaria_risk_effect - (malaria_risk_diff / 2),
malaria_risk_effect),
malaria_risk_effect_rescaled = rescale(malaria_risk_effect, to = c(-2.2, 2.2)),
malaria_risk = 1 / (1 + exp(-malaria_risk_effect_rescaled)),
malaria_risk = round(malaria_risk * 100, 0)) %>%
mutate_at(vars(income, resistance), ~round(., 0)) %>%
mutate(temperature = (temperature - 32) * 5/9,
temperature = round(temperature, 1)) %>%
mutate(malaria_risk = malaria_risk)
mosquito_nets_final <- mosquito_nets %>%
select(id, net, net_num, malaria_risk, income, health, household,
eligible = enrolled, temperature, resistance)
write_csv(mosquito_nets_final, "data/mosquito_nets.csv")
nets <- mosquito_nets_final
model_naive <- lm(malaria_risk ~ net, data = nets)
# Logit model predicting net use
model_net <- glm(net ~ income + temperature + health,
data = nets,
family = binomial(link = "logit"))
# Create propensity scores and weights
net_ipw <- augment_columns(model_net,
nets,
type.predict = "response") %>%
rename(propensity = .fitted) %>%
mutate(ipw = (net_num / propensity) + ((1 - net_num) / (1 - propensity)))
model_ipw <- lm(malaria_risk ~ net,
data = net_ipw,
weights = ipw)
coefs_to_plot <- tibble(model_name = c("Naive model", "Model adjusted with IPW"),
model = list(model_naive, model_ipw)) %>%
mutate(tidied = map(model, ~tidy(., conf.int = TRUE))) %>%
unnest(tidied) %>%
filter(term != "(Intercept)")
ggplot(coefs_to_plot, aes(x = estimate, y = model_name)) +
geom_vline(xintercept = -10, color = "red") +
geom_pointrange(aes(xmin = conf.low, xmax = conf.high))
modelsummary(list("Naive" = model_naive, "IPW" = model_ipw))
# Logit model predicting net use
model_net <- glm(net ~ income + temperature + health,
data = nets,
family = binomial(link = "logit"))
# Create propensity scores and weights
net_ipw <- augment_columns(model_net,
nets,
type.predict = "response") %>%
rename(propensity = .fitted) %>%
mutate(ipw = (net_num / propensity) + ((1 - net_num) / (1 - propensity)))
model_ipw <- lm(malaria_risk ~ net,
data = net_ipw,
weights = ipw)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(targets)
library(broom)
library(scales)
library(modelsummary)
tar_load(net_data)
model_naive <- tar_read(model_naive)
tar_load(model_ipw)
ggplot(net_data, aes(x = malaria_risk)) +
geom_histogram(binwidth = 5, boundary = 0, color = "white")
library(tidyverse)
library(targets)
library(broom)
library(scales)
library(modelsummary)
tar_load(net_data)
model_naive <- tar_read(model_naive)
tar_load(model_ipw)
library(tidyverse)
library(targets)
library(broom)
library(scales)
library(modelsummary)
tar_load(net_data)
model_naive <- tar_read(model_naive)
tar_load(model_ipw)
rlang::last_error()
library(tidyverse)
library(targets)
library(broom)
library(scales)
library(modelsummary)
tar_make()
install.packages("tarchetypes")
tar_make()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(targets)
library(broom)
library(scales)
library(modelsummary)
tar_load(net_data)
model_naive <- tar_read(model_naive)
tar_load(model_ipw)
ggplot(net_data, aes(x = malaria_risk)) +
geom_histogram(binwidth = 5, boundary = 0, color = "white")
coefs_to_plot <- tibble(model_name = c("Naive model", "Model adjusted with IPW"),
model = list(model_naive, model_ipw)) %>%
mutate(tidied = map(model, ~tidy(., conf.int = TRUE))) %>%
unnest(tidied) %>%
filter(term != "(Intercept)")
ggplot(coefs_to_plot, aes(x = estimate, y = model_name)) +
geom_vline(xintercept = -10, color = "red") +
geom_pointrange(aes(xmin = conf.low, xmax = conf.high))
modelsummary(list("Naive" = model_naive, "IPW" = model_ipw))
tar_glimpse()
tar_glimpse()
coefs_to_plot <- tibble(model_name = c("Naive model", "Model adjusted with IPW"),
model = list(model_naive, model_ipw)) %>%
mutate(tidied = map(model, ~tidy(., conf.int = TRUE))) %>%
unnest(tidied) %>%
filter(term != "(Intercept)")
ggplot(coefs_to_plot, aes(x = estimate, y = model_name)) +
geom_vline(xintercept = -10, color = "blue") +
geom_pointrange(aes(xmin = conf.low, xmax = conf.high))
modelsummary(list("Naive" = model_naive, "IPW" = model_ipw))
coefs_to_plot <- tibble(model_name = c("Naive model", "Model adjusted with IPW"),
model = list(model_naive, model_ipw)) %>%
mutate(tidied = map(model, ~tidy(., conf.int = TRUE))) %>%
unnest(tidied) %>%
filter(term != "(Intercept)")
ggplot(coefs_to_plot, aes(x = estimate, y = model_name)) +
geom_vline(xintercept = -10, color = "blue") +
geom_pointrange(aes(xmin = conf.low, xmax = conf.high))
tar_glimpse()
coefs_to_plot <- tibble(model_name = c("Naive model", "Model adjusted with IPW"),
model = list(model_naive, model_ipw)) %>%
mutate(tidied = map(model, ~tidy(., conf.int = TRUE))) %>%
unnest(tidied) %>%
filter(term != "(Intercept)")
ggplot(coefs_to_plot, aes(x = estimate, y = model_name)) +
geom_vline(xintercept = -10, color = "red") +
geom_pointrange(aes(xmin = conf.low, xmax = conf.high))
tar_glimpes()
tar_glimpse()
library(tidyverse)
library(targets)
library(broom)
library(scales)
library(modelsummary)
tar_load(net_data)
model_naive <- tar_read(model_naive)
tar_load(model_ipw)
tar_glimpse()
tar_glimpse()
tar_outdated()
tar_visnetwork()
tar_make()
tar_visnetwork()
